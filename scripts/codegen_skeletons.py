
#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
NWW 모듈 스켈레톤 생성기.
- 사용:
    python scripts/codegen_skeletons.py --out src/modules --models-package nww_models
"""
import os, argparse, textwrap, re
from pathlib import Path

MODULES = [
    ("M01_ingestion",        "RawDoc",       "RawDoc",       "Ingestion: fetch & persist raw document(s)."),
    ("M02_preprocess",       "RawDoc",       "CleanDoc",     "Normalize/clean dedupe/OCR; language detect."),
    ("M03_entity_resolution","CleanDoc",     "CleanDoc",     "Resolve persons/orgs to canonical IDs; add tags."),
    ("M04_event_builder",    "CleanDoc",     "Event",        "Build Who–Did–What–To–Whom–Where–When facts."),
    ("M05_evidence_builder", "CleanDoc",     "EvidenceCard", "Select two distinct sentences + lineage."),
    ("M06_framing_lsl",      "Event",        "FrameScore",   "Compute per-frame probabilities via LSL prompt."),
    ("M07_fpd_gate",         "FrameScore",   "dict",         "Apply α/δ + hysteresis + persistence. Return mode/eligible."),
    ("M08_harvest_engine",   "dict",         "HarvestEvent", "Decide L1/L2 queries and budgets."),
    ("M09_secondary_deep",   "Event",        "DeepFeatures", "Clustering, sentiment, embeddings -> Vector DB."),
    ("M10_esd_crisis",       "FrameScore",   "dict",         "Apply ESD × indicators with IPD lags."),
    ("M11_scenario",         "dict",         "Scenario",     "Generate scenario outline (evidence≥2)."),
    ("M12_final_analysis",   "dict",         "FinalReport",  "Ensemble findings/recs; link evidence."),
    ("M13_policy_response",  "FinalReport",  "Alert",        "Emit alerts/actions per policy."),
]

TEMPLATE = """# AUTOGENERATED STUB — {mod}
\"\"\"{doc}
I/O: {inp} -> {out}
\"\"\"
from typing import Any, Dict, Optional
try:
    from {pkg} import *
except Exception:  # pragma: no cover
    # Allow import even if models are not generated yet
    pass

def run(input_obj, **kwargs):
    \"\"\"Run {mod}. Replace with real logic.
    Args:
        input_obj: {inp}
    Returns:
        {out}
    \"\"\"
    raise NotImplementedError("{mod} is a stub. Implement me.")
"""

def main():
    ap = argparse.ArgumentParser()
    ap.add_argument("--out", default="src/modules")
    ap.add_argument("--models-package", default="nww_models")
    args = ap.parse_args()

    out = Path(args.out)
    out.mkdir(parents=True, exist_ok=True)
    for mod, inp, outp, doc in MODULES:
        code = TEMPLATE.format(mod=mod, inp=inp, out=outp, doc=doc, pkg=args.models_package)
        (out / f"{mod}.py").write_text(code, encoding="utf-8")
        print("generated:", out / f"{mod}.py")

if __name__ == "__main__":
    main()
